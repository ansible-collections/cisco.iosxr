---
- ansible.builtin.debug: msg="START cli/ping.yaml on connection={{ ansible_connection }}"

- register: show_version_result
  cisco.iosxr.iosxr_command:
    commands: show version

- ansible.builtin.set_fact: management_interface=GigabitEthernet0/0
  when: "'Cisco IOSXR' in show_version_result.stdout[0]"

- ansible.builtin.set_fact: management_interface=GigabitEthernet1
  when: "'Cisco IOS-XR' in show_version_result.stdout[0]"

- name: Get show IP management interface output
  register: show_ip_interface_result
  cisco.iosxr.iosxr_command:
    commands:
      - show ip interface {{ management_interface }} | include Internet address

- name: Extract the IP address from registered output
  ansible.builtin.set_fact: management_ip="{{ show_ip_interface_result.stdout[0].split()[-1].split('/')[0]}}"

- name: Expected successful ping
  register: esp
  cisco.iosxr.iosxr_ping:
    dest: "{{ management_ip }}"

- name: Unexpected unsuccessful ping
  register: uup
  ignore_errors: true
  cisco.iosxr.iosxr_ping:
    dest: 10.255.255.250

- name: Unexpected successful ping
  register: usp
  ignore_errors: true
  cisco.iosxr.iosxr_ping:
    dest: "{{ management_ip }}"
    state: absent

- name: Expected unsuccessful ping
  register: eup
  cisco.iosxr.iosxr_ping:
    dest: 10.255.255.250
    state: absent

- name: Assert
  ansible.builtin.assert:
    that:
      - esp.failed == eup.failed == false
      - usp.failed == uup.failed == true
