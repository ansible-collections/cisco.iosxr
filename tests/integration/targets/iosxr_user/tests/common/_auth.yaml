---
- block:
    - name: Create user with password
      connection: ansible.netcommon.network_cli
      cisco.iosxr.iosxr_user:
        name: auth_user
        state: present
        configured_password: pass123

    - name: Test login
      ansible.builtin.expect:
        command: ssh auth_user@{{ ansible_ssh_host }} -p {{ ansible_ssh_port|default(22) }} -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no show version
        responses:
          (?i)password: pass123
      connection: ansible.netcommon.network_cli

    - name: Test login with invalid password (should fail)
      ansible.builtin.expect:
        command: ssh auth_user@{{ ansible_ssh_host }} -p {{ ansible_ssh_port|default(22) }} -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no show version
        responses:
          (?i)password: badpass
      ignore_errors: true
      connection: ansible.netcommon.network_cli
      register: results

    - name: Check that attempt failed
      ansible.builtin.assert:
        that:
          - results.failed

    - name: Create user with private key (contents input)
      connection: ansible.netcommon.network_cli
      cisco.iosxr.iosxr_user:
        name: auth_user
        state: present
        public_key_contents: '{{ lookup(''file'', "{{ role_path }}/files/public.pub") }}'

    - name: Test login with private key
      ansible.builtin.expect:
        command:
          ssh auth_user@{{ ansible_ssh_host }} -p {{ ansible_ssh_port|default(22) }} -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i {{ role_path
          }}/files/private show version
        responses:
          (?i)password: pass123
      connection: ansible.netcommon.network_cli

    - name: Remove user and key
      connection: ansible.netcommon.network_cli
      cisco.iosxr.iosxr_user:
        name: auth_user
        state: absent

    - name: Test login with private key (should fail, no user)
      ansible.builtin.expect:
        command:
          ssh auth_user@{{ ansible_ssh_host }} -p {{ ansible_ssh_port|default(22) }} -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i {{ role_path
          }}/files/private show version
        responses:
          (?i)password: pass123
      ignore_errors: true
      connection: ansible.netcommon.network_cli
      register: results

    - name: Create user with private key (path input)
      connection: ansible.netcommon.network_cli
      cisco.iosxr.iosxr_user:
        name: auth_user
        state: present
        public_key: "{{ role_path }}/files/public.pub"

    - name: Test login with private key
      ansible.builtin.expect:
        command:
          ssh auth_user@{{ ansible_ssh_host }} -p {{ ansible_ssh_port|default(22) }} -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i {{ role_path
          }}/files/private show version
        responses:
          (?i)password: pass123
      ignore_errors: true
      connection: ansible.netcommon.network_cli

    - name: Change private key for user
      connection: ansible.netcommon.network_cli
      cisco.iosxr.iosxr_user:
        name: auth_user
        state: present
        public_key_contents: '{{ lookup(''file'', "{{ role_path }}/files/public2.pub") }}'

    - name: Test login with invalid private key (should fail)
      ansible.builtin.expect:
        command:
          ssh auth_user@{{ ansible_ssh_host }} -p {{ ansible_ssh_port|default(22) }} -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i {{ role_path
          }}/files/private show version
        responses:
          (?i)password: pass123
      ignore_errors: true
      connection: ansible.netcommon.network_cli
      register: results

    - name: Check that attempt failed
      ansible.builtin.assert:
        that:
          - results.failed
  always:
    - name: Delete user
      connection: ansible.netcommon.network_cli
      register: result
      cisco.iosxr.iosxr_user:
        name: auth_user
        state: absent
